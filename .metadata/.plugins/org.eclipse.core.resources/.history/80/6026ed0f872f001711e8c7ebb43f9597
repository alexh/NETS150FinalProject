import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;

public class PageRank {
	
	Graph g;
	Map<Vertex, Double> scores = new HashMap<>();
	
	public PageRank(Graph g){
		this.g = g;
		initPageRank();
	}
	
	public void initPageRank(){
		//Initializing the starting value aka score of each vertex to 1 / # of vertices
		//Updated 1 to 100 so numbers are easier to think about
		
		double initScore = 100.0 / (g.adjList.keySet().size() * 1.0);
		System.out.println(initScore);
		for(Vertex v : g.adjList.keySet()){
			scores.put(v, initScore);
		}
	}
	
	public void executeStep(){
		Map<Vertex, Double> newScores = new HashMap();
		newScores.putAll(scores);
		
		//Resetting scores for new round
		for (Vertex v: newScores.keySet()){
			newScores.put(v, 0.0);
		}
		
		for(Entry<Vertex, LinkedList<Vertex>> e: g.adjList.entrySet()){
			double score = scores.get(e.getKey());
			Vertex v = e.getKey();
			//Sum of all edge weights leaving v
			double neighborEdgeWeightSum = 0;
			for(Vertex q : e.getValue()){
				neighborEdgeWeightSum += g.getEdgeWeight(v, q);
			}
			
			
		}
	}
	
	public Map<Vertex, Double> executePageRank(int stepCount){
		for(int i = 0; i < stepCount; i++){
			executeStep();
		}
		
		return null;
	}
	
	

}
