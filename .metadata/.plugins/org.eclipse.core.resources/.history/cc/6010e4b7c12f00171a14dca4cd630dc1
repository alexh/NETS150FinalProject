import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JApplet;
import javax.swing.JFrame;

import org.jgraph.JGraph;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.GraphConstants;

import org.jgrapht.ListenableGraph;
import org.jgrapht.ext.JGraphModelAdapter;
import org.jgrapht.graph.ListenableDirectedGraph;

import com.jgraph.layout.JGraphFacade;
import com.jgraph.layout.JGraphLayout;
import com.jgraph.layout.hierarchical.JGraphHierarchicalLayout;

import org.jgrapht.graph.DefaultEdge;

/**
 * A demo applet that shows how to use JGraph to visualize JGraphT graphs.
 *
 * @author Barak Naveh
 *
 * @since Aug 3, 2003
 */
public class GraphApplet extends JApplet {
    private static final Color     DEFAULT_BG_COLOR = Color.decode( "#FAFBFF" );
    private static final Dimension DEFAULT_SIZE = new Dimension( 530, 320 );

    // 
    private JGraphModelAdapter m_jgAdapter;

    /**
     * @see java.applet.Applet#init().
     */
    public void init( Graph ourGraph ) {
        // create a JGraphT graph
        ListenableGraph g = new ListenableDirectedGraph( DefaultEdge.class );

        // create a visualization using JGraph, via an adapter
        m_jgAdapter = new JGraphModelAdapter( g );

        JGraph jgraph = new JGraph( m_jgAdapter );

        adjustDisplaySettings( jgraph );
        getContentPane(  ).add( jgraph );
        resize( DEFAULT_SIZE );
        
        ArrayList<Vertex> addedVertices = new ArrayList<Vertex>();
        for(Entry<Vertex, LinkedList<Vertex>> v: ourGraph.adjList.entrySet())
        {
        	if(!addedVertices.contains(v.getKey()))
        	{
            	addedVertices.add(v.getKey());
        	}
        }
        
//        for(Entry<Vertex, LinkedList<Vertex>> e : ourGraph.adjList.entrySet()){
//        	if(!g.containsVertex(e.getKey().name)){
//        		g.addVertex(e.getKey().name);
//        	}
//        	for(Vertex v : e.getValue()){
//        		if(!g.containsVertex(v.name)){
//            		g.addVertex(v.name);
//            	}
//        		g.addEdge(e.getKey().name, v.name);
////        		System.out.println("added edge to visualizer");
//        	}
//        }
        
        // add some sample data (graph manipulated via JGraphT)
//        g.addVertex( "v1" );
//        g.addVertex( "v2" );
//        g.addVertex( "v3" );
//        g.addVertex( "v4" );
//
//        g.addEdge( "v1", "v2" );
//        g.addEdge( "v2", "v3" );
//        g.addEdge( "v3", "v1" );
//        g.addEdge( "v4", "v3" );

        // position vertices nicely within JGraph component
        positionVertexAt( "v1", 130, 40 );
        positionVertexAt( "v2", 60, 200 );
        positionVertexAt( "v3", 310, 230 );
        positionVertexAt( "v4", 380, 70 );

        // that's all there is to it!...
        JGraphLayout layout = new JGraphHierarchicalLayout(); // or whatever layouting algorithm
        JGraphFacade facade = new JGraphFacade(jgraph);
        layout.run(facade);
        Map nested = facade.createNestedMap(false, false);
        jgraph.getGraphLayoutCache().edit(nested);
    }


    private void adjustDisplaySettings( JGraph jg ) {
        jg.setPreferredSize( DEFAULT_SIZE );

        Color  c        = DEFAULT_BG_COLOR;
        String colorStr = null;

        try {
            colorStr = getParameter( "bgcolor" );
        }
         catch( Exception e ) {}

        if( colorStr != null ) {
            c = Color.decode( colorStr );
        }

        jg.setBackground( c );
    }


    
    
    private void positionVertexAt( Object vertex, int x, int y ) {
        DefaultGraphCell cell = m_jgAdapter.getVertexCell( vertex );
        Map              attr = cell.getAttributes(  );
        Rectangle2D        bounds    = GraphConstants.getBounds( attr );
        Rectangle2D newBounds = new Rectangle2D.Double(x,y,bounds.getWidth(),bounds.getHeight());

        GraphConstants.setBounds( attr,newBounds );

        Map cellAttr = new HashMap(  );
        cellAttr.put( cell, attr );
        m_jgAdapter.edit( cellAttr, null, null, null );
    }
}